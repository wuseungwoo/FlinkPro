对于Flink来说，watermark是处理事件时间（EventTime）必不可少的概念。
本文将从具体实践，来细致了解watermark处理延迟数据的策略:


关于处理延迟数据，因为迟到事件出现时，窗口已经出现关闭，并产出计算结果，因此常用几个方法有3种：

抛弃数据：将迟到数据视为错误数据丢弃。
迟到激活：已经关闭的窗口重新计算，并修正结果。
测流收集：将迟到数据收集起来，另做处理。
Flink默认采用第一种方式， 也就是直接丢弃，其他两种分别使用Allowed Lateness和SideOutput

SideOutput: 将迟到事件单独放入一个数据流分支，这会作为window计算的副产品，方便用户做特殊处理；

Allowed Lateness: 允许用户设置一个最大迟到时长，窗口关闭后会一直保存窗口状态直至超过设置的最大时长，这期间迟到的时间不会被丢弃处理，而是直接触发”已关闭的窗口“的操作。因为保存窗口状态需要额外内存，每次会触发全部的窗口数据计算，代价比较大，所以不宜多，不宜长。

总结一下：

窗口window的作用是周期性获取数据
watermark是用来处理数据乱序
allowLateNess 是为了将窗口关闭的时间延迟一段时间
sideOutPut 是用来兜底，窗口彻底关闭，还可以把迟到数据放到侧输出流

迟到数据几乎会一直发生在我们的日常操作数据中，处理迟到数据，没有一个严格的标准，要根据数据量，业务考虑来酌情处理迟到数据，可以将上面的几个操作灵活组合，满足我们自己的场景。

sideOutPut可以用来处理窗口关闭后依然迟到的数据，还可以结合process使用侧输出流分流出需要的流
